#!/usr/bin/env node

import { Command } from "commander";
import { measure, printResults } from "../lib/measure.js";
import { cleanupBrowser } from "../lib/browser.js";
import { terminateServer } from "../lib/server.js";
import { DEFAULT_OPTIONS } from "../lib/constants.js";

// Setup commander
const program = new Command();

program
  .name("build-start-perf-test")
  .description("Measures build and load performance for web applications")
  .option("-u, --url <url>", "URL to load", "http://localhost:4200")
  .option("-f, --file <path>", "File to touch to trigger a reload")
  .option("-c, --command <cmd>", "Command to start dev server", "pnpm start")
  .option("-w, --wait-for <selector>", "Element selector to wait for", "body")
  .addHelpText(
    "after",
    `
Measures:
- Build time
- Time to first paint
- Time to app load (waiting for specified element)
- Time to finished reload after file changes

Examples:
  $ build-start-perf-test --url http://localhost:3000 --command "npm run dev"
  $ build-start-perf-test --file app.js --wait-for ".app-container"
`,
  );

// Parse arguments and run measurement
program.parse();
const args = program.opts();

// Setup options and signal handlers
const options = { ...DEFAULT_OPTIONS, ...args };
["SIGINT", "SIGTERM", "SIGQUIT"].forEach((signal) => {
  process.on(signal, async () => {
    console.log(`\nReceived ${signal}, cleaning up...`);
    await terminateServer();
    await cleanupBrowser();
    process.exit(0);
  });
});

try {
  await measure(options);

  console.log("\nMeasurement completed successfully!");

  printResults();
  process.exit(0);
} catch (error) {
  console.error("Measurement failed:", error.message);
  process.exit(1);
}
